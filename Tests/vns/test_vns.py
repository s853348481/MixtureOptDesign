from MixtureOptDesign.vns.vns import unique_rows
import numpy as np
import pytest

@pytest.fixture

def arr():
    design = np.array([[[0.96, 0.16, 0.64, 0.52, 0.16, 0.96, 0.16, 0.52, 0.16, 0.64,
         0.36, 0.56, 0.16, 0.  , 0.16, 0.52],
        [0.32, 0.64, 0.  , 0.56, 0.52, 0.2 , 0.52, 0.36, 0.56, 0.36,
         0.32, 0.32, 0.36, 0.36, 0.2 , 0.2 ]],

       [[0.04, 0.36, 0.12, 0.  , 0.04, 0.04, 0.36, 0.  , 0.04, 0.12,
         0.56, 0.28, 0.04, 0.12, 0.04, 0.  ],
        [0.6 , 0.12, 0.12, 0.28, 0.  , 0.12, 0.  , 0.56, 0.28, 0.56,
         0.6 , 0.6 , 0.56, 0.56, 0.12, 0.12]],

       [[0.  , 0.48, 0.24, 0.48, 0.8 , 0.  , 0.48, 0.48, 0.8 , 0.24,
         0.08, 0.16, 0.8 , 0.88, 0.8 , 0.48],
        [0.08, 0.24, 0.88, 0.16, 0.48, 0.68, 0.48, 0.08, 0.16, 0.08,
         0.08, 0.08, 0.08, 0.08, 0.68, 0.68]]])
    return design

class TestUniqueRows(object):
    def test_unique_rows(self,arr):
        rows = unique_rows(arr)
        
        expected = np.array([[0.  , 0.12, 0.88],
       [0.16, 0.04, 0.8 ],
       [0.16, 0.36, 0.48],
       [0.2 , 0.12, 0.68],
       [0.32, 0.6 , 0.08],
       [0.36, 0.56, 0.08],
       [0.52, 0.  , 0.48],
       [0.56, 0.28, 0.16],
       [0.64, 0.12, 0.24],
       [0.96, 0.04, 0.  ]])
        
        
        assert np.array_equal(rows,expected)
        assert rows.shape == (10,3)